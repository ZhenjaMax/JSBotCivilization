const { updateNewCooldownDate,
        getAllUsersNewCooldown,
        getUserdata } = require('./database.js');
const { draftFFA,
        draftTeam } = require('./draft.js');
const { civilizations } = require('./config.js');
const { getEmbed_NoVoice,
        getEmbed_Split,
        getEmbed_Error } = require('./embedMessages.js');
const { parsePlayers } = require('./functions.js');

async function split(robot, message, args, autoNewCapitans = false, autoUserID = false, autoArgsTeamersDraft = false){
    let capitansID = [];
    let userID = [];
    if(!autoNewCapitans){
        voiceChannel = message.member.voice.channel;
        if(voiceChannel == null)
            return message.channel.send(getEmbed_NoVoice());
        capitansID = [message.author.id, parsePlayers(message.content)[0]];
        if(capitansID[1] == undefined)
            return message.channel.send(getEmbed_Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞."));
        if(capitansID[1] == capitansID[0])
            return message.channel.send(getEmbed_Error("–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–∞–ø–∏—Ç–∞–Ω–∞, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–µ—Ä–≤—ã–º –∫–∞–ø–∏—Ç–∞–Ω–æ–º."));
        membersArray = await message.member.voice.channel.members.filter(member => !(member.user.bot))
        userID = membersArray.keyArray();
        if(userID.length%2 == 1)
            return message.channel.send(getEmbed_Error("–î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤!"));
        if((userID.length < 4)||(userID.length > 18))
            return message.channel.send(getEmbed_Error("–î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç 4 –¥–æ 18 –∏–≥—Ä–æ–∫–æ–≤!"));
        if(!userID.includes(capitansID[1]))
            return message.channel.send(getEmbed_Error("–í—Ç–æ—Ä–æ–π –∫–∞–ø–∏—Ç–∞–Ω –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –≤—ã!"));
    } else {
        capitansID = autoNewCapitans;
        userID = autoUserID;
    }

    playersNumber = userID.length;
    let teamPlayers = [[], []];
    const emojiOrder = ["‚õî", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü", "üá¶", "üáß", "üá®", "üá©", "üá™", "üá´"];
    let emojiReactions = [];
    const pickOptionStandart =  [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1];
    const pickOptionFair =      [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0];
    for(i in capitansID){
        userID.splice(userID.indexOf(capitansID[i]), 1);    // –£–¥–∞–ª–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∏–∑ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        teamPlayers[i].push(capitansID[i]);
    }
    let r = Math.random();
    if(r >= 0.5){
        let temp = capitansID[1];
        capitansID[1] = capitansID[0];
        capitansID[0] = temp;
        temp = teamPlayers[1];
        teamPlayers[1] = teamPlayers[0];
        teamPlayers[0] = temp;
    }

    splitType = 0;
    handler = args[1];
    if((handler == "fair")||(autoNewCapitans))
        splitType = 1;
    const pickCurrent = splitType ? pickOptionFair : pickOptionStandart;
    splitStepNumber = 0;

    splitMessage = await message.channel.send(getEmbed_Split(teamPlayers, userID, pickCurrent[splitStepNumber], splitStepNumber, 1, message.author, playersNumber, splitType));
    const trueFilter = (reaction, user) => {return true;};
    const filter = (reaction, user) => {return ((capitansID[pickCurrent[splitStepNumber]] == user.id) && (emojiOrder.includes(reaction.emoji.toString()))) || (user.bot);};
    splitMessageCollector = await splitMessage.createReactionCollector(trueFilter, {time: 900000});
    for(i = 0; i <= userID.length; i++)
        emojiReactions.push(await splitMessage.react(emojiOrder[i]));
    splitMessageCollector.on('collect', async (reaction, user) => {
        if(filter(reaction, user)){
            if(user.bot) return;
            emojiName = reaction.emoji.toString();
            if(emojiName == emojiOrder[0]){
                splitMessage.delete();
                return;
            }
            await splitMessage.reactions.resolve(reaction).users.remove(user);
            emojiReactions[userID.length].users.remove(robot.user.id);
            teamPlayers[pickCurrent[splitStepNumber]].push(userID[emojiOrder.indexOf(emojiName)-1]);
            userID.splice(emojiOrder.indexOf(emojiName)-1, 1);
            splitStepNumber++;
            if(userID.length == 1){
                teamPlayers[pickCurrent[splitStepNumber]].push(userID[0]);
                userID = [];
                await splitMessage.edit(getEmbed_Split(teamPlayers, userID, pickCurrent[splitStepNumber], splitStepNumber, 2, message.author, playersNumber, splitType));
                await splitMessage.reactions.removeAll()
                await splitMessageCollector.stop();
                return;
            } else {
                splitMessage.edit(getEmbed_Split(teamPlayers, userID, pickCurrent[splitStepNumber], splitStepNumber, 0, message.author, playersNumber, splitType));
            }
        } else {
            await splitMessage.reactions.resolve(reaction).users.remove(user);
        }
    });
    splitMessageCollector.on('end', async (collected, reason) => {
        if((reason.toLowerCase() == "time")||(userID.length != 0)){
            await splitMessage.delete();
        } else if(autoNewCapitans){
            draftTeam(robot, message, autoArgsTeamersDraft);
        }
        return;
    });
}

async function newgameVotingFFA(robot, message, args){
    voiceChannel = message.member.voice.channel;
    if(voiceChannel == null)
        return message.channel.send(getEmbed_NoVoice());
    
    authorID = message.author.id;
    userData = await getUserdata(authorID);
    newCommandDate = userData.newCooldown;
    currentDate = new Date();
    if(newCommandDate){
        if((currentDate.getTime() - newCommandDate.getTime())/1000 < 150)
            return;
    }
    newList = await getAllUsersNewCooldown();
    for(newCooldownPlayer of newList)
        if((currentDate.getTime() - newCooldownPlayer.dataValues.newCooldown.getTime())/1000 < 150 )
            return;
        else
            await updateNewCooldownDate(newCooldownPlayer.dataValues.userid, true);
    await updateNewCooldownDate(authorID);
    users =  message.member.voice.channel.members;
    usersID = users.keyArray();
    for(let i = 0; i < usersID.length; i++)
        if(message.guild.members.cache.get(usersID[i]).user.bot)
            usersID.splice(i, 1);
    usersSourceID = usersID.map((x) => x);
    usersCount = usersID.length;
    handler = args.shift();
    gameType = 0;
    if(handler == "team")
        gameType = 1;
    if((gameType == 1)&&(usersCount % 2 != 0)&&(usersCount < 4))
        return message.channel.send(getEmbed_Error("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è Teamers –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –Ω–æ —Ö–æ—Ç—è –±—ã 4."));
    if((gameType == 0)&&(usersCount < 2))
        return message.channel.send(getEmbed_Error("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è FFA –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö–æ—Ç—è –±—ã 2 –∏–≥—Ä–æ–∫–∞."));
    messageBeginContentStart = [], messageBeginContentMid = [], possibleResults = [], reactionsList = [];
    emojiOrder = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü", "üá¶", "üáß", "üá®", "üá©", "üá™", "üá´", "üá¨", "üá≠"];

    if(gameType == 0){
        messageBeginContentStart = [
            `üìå __**–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ FFA**__ üìå
            *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ* <#795264927974555651>.
            *–ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ —ç–º–æ–¥–∑–∏  ‚õî –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.*`,
            
            `üë• __**–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã ({0})**__:`.format(usersCount),
            `‚ö°__**–ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏**__:`,
            `================================`
        ];
        messageBeginContentMid = [
            `__**–ö–∞—Ä—Ç–∞**__: `,
            `__**–í–æ–∑—Ä–∞—Å—Ç –º–∏—Ä–∞**__: `,
            `__**–°—Ç–∏—Ö–∏–π–Ω—ã–µ –±–µ–¥—Å—Ç–≤–∏—è**__: `,
            `__**–ë–æ–Ω—É—Å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã**__: `,
            `__**–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã**__: `,
            `__**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á—É–¥–µ—Å –ø—Ä–∏—Ä–æ–¥—ã**__: `,
            `__**–¢–æ—Ä–≥–æ–≤–ª—è –∑–æ–ª–æ—Ç–æ–º**__: `,
            `__**–¢–æ—Ä–≥–æ–≤–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏**__: `,
            `__**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥—Ä—É–∂–± –∏ —Å–æ—é–∑–æ–≤ –≤ —Å—É–º–º–µ**__: `,
            `__**–í–æ–µ–Ω–Ω—ã–π —Å–æ—é–∑**__: `,
            `__**–ë–∞–Ω –≤–æ–µ–Ω–Ω–æ–π –ø–æ–±–µ–¥—ã**__: `,
            `__**–ë–∞–Ω—ã –Ω–∞—Ü–∏–π**__: *–¥–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –Ω–∞—Ü–∏–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º; –µ—Å–ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ, —Ç–æ –Ω–∞—Ü–∏—è –æ–∫–∞–∂–µ—Ç—Å—è –≤ –±–∞–Ω–µ.*`,
        
            `================================
            ‚è∞  **–ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–æ–¥–∏—Ç—Å—è 150 —Å–µ–∫—É–Ω–¥!**
            üìå  **–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ —ç–º–æ–¥–∑–∏ –Ω–∏–∂–µ.**`
        ];
        possibleResults = [
            ["üáµ –ü–∞–Ω–≥–µ—è", "üá≠ –ù–∞–≥–æ—Ä—å–µ", "7Ô∏è‚É£  –°–µ–º—å –º–æ—Ä–µ–π", "üá±  –û–∑—ë—Ä–∞", "üá® –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã", "üá¶ –ê—Ä—Ö–∏–ø–µ–ª–∞–≥–∏"],
            ["üèïÔ∏è  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "üèîÔ∏è –ù–æ–≤—ã–π"],
            ["2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"],
            ["üá∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ", "üá¶ –ò–∑–æ–±–∏–ª—å–Ω—ã–µ"],
            ["üá∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ", "üá¶ –ò–∑–æ–±–∏–ª—å–Ω—ã–µ", "<:Yes:808418109710794843> –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"],
            ["üåÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", "üå† –ò–∑–æ–±–∏–ª—å–Ω–æ–µ"],
            ["<:No:808418109319938099> –ó–∞–ø—Ä–µ—â–µ–Ω–∞", "üá¶ –ú–µ–∂–¥—É —Å–æ—é–∑–Ω–∏–∫–∞–º–∏", "üá´ –ú–µ–∂–¥—É –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–æ—é–∑–Ω–∏–∫–∞–º–∏", "ü™ô –†–∞–∑—Ä–µ—à–µ–Ω–∞"],
            ["<:No:808418109319938099> –ó–∞–ø—Ä–µ—â–µ–Ω–∞", "üá¶ –ú–µ–∂–¥—É —Å–æ—é–∑–Ω–∏–∫–∞–º–∏", "üá´ –ú–µ–∂–¥—É –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–æ—é–∑–Ω–∏–∫–∞–º–∏", "üê¥ –†–∞–∑—Ä–µ—à–µ–Ω–∞"],
            ["2Ô∏è‚É£", "3Ô∏è‚É£", "‚ôæÔ∏è"],
            ["<:No:808418109319938099> –ó–∞–ø—Ä–µ—â—ë–Ω", "üó°Ô∏è –†–∞–∑—Ä–µ—à—ë–Ω"],
            ["<:No:808418109319938099> –ù–µ—Ç", "üêç –î–∞"],
        ];
        reactionsList = [
            ["üáµ", "üá≠", "7Ô∏è‚É£", "üá±", "üá®", "üá¶"],
            ["üèïÔ∏è", "üèîÔ∏è"],
            ["2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"],
            ["üá∏", "üá¶"],
            ["üá∏", "üá¶", "<:Yes:808418109710794843>"],
            ["üåÖ", "üå†"],
            ["<:No:808418109319938099>", "üá¶", "üá´", "ü™ô"],
            ["<:No:808418109319938099>", "üá¶", "üá´", "üê¥"],
            ["2Ô∏è‚É£", "3Ô∏è‚É£", "‚ôæÔ∏è"],
            ["<:No:808418109319938099>", "üó°Ô∏è"],
            ["<:No:808418109319938099>", "üêç"],
            ["ü§î"],
            ["‚ö°"],
        ];
    } else {    // –î–õ–Ø –¢–ò–ú–ú–ï–†–°–û–í
        emojiOrder = emojiOrder.slice(0, usersCount);
        let capitanVoteResults = [];
        for(i in emojiOrder)
            capitanVoteResults.push("{0} <@{1}>".format(emojiOrder[i], usersID[i]));
        messageBeginContentStart = [
            `üìå __**–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ Teamers**__ üìå
            *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ* <#795264927974555651>.
            *–ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ —ç–º–æ–¥–∑–∏  ‚õî –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.*`,
            
            `üë• __**–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã ({0})**__:`.format(usersCount),
            `‚ö°__**–ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏**__:`,
            `================================`
        ];
        messageBeginContentMid = [
            `__**–ö–∞—Ä—Ç–∞**__: `,
            //`__**–í–æ–∑—Ä–∞—Å—Ç –º–∏—Ä–∞**__: `,
            //`__**–°—Ç–∏—Ö–∏–π–Ω—ã–µ –±–µ–¥—Å—Ç–≤–∏—è**__: `,
            //`__**–ë–æ–Ω—É—Å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã**__: `,
            //`__**–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã**__: `,
            //`__**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á—É–¥–µ—Å –ø—Ä–∏—Ä–æ–¥—ã**__: `,

            `__**–¢–æ—Ä–≥–æ–≤–ª—è —Ä–µ–ª–∏–∫–≤–∏—è–º–∏ –¥–æ 20 —Ö–æ–¥–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ**__: `,
            //`__**–í–æ–µ–Ω–Ω—ã–π —Å–æ—é–∑**__: `,
            //`__**–ë–∞–Ω –≤–æ–µ–Ω–Ω–æ–π –ø–æ–±–µ–¥—ã**__: `,
            `__**–í—ã–±–æ—Ä—ã –¥–≤—É—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥:**__: `,                                                                                              // 9 –û–°–û–ë–´–ô –°–¢–ê–¢–£–°!!!
            `__**–ë–∞–Ω—ã –Ω–∞—Ü–∏–π**__: *–¥–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –Ω–∞—Ü–∏–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º; –µ—Å–ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ, —Ç–æ –Ω–∞—Ü–∏—è –æ–∫–∞–∂–µ—Ç—Å—è –≤ –±–∞–Ω–µ.*`,     // 10
        
            `================================
            ‚è∞  **–ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–æ–¥–∏—Ç—Å—è 150 —Å–µ–∫—É–Ω–¥!**
            üìå  **–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ —ç–º–æ–¥–∑–∏ –Ω–∏–∂–µ.**`                                                                                   // 11
        ];
        possibleResults = [
            ["üáµ –ü–∞–Ω–≥–µ—è", "üá≠ –ù–∞–≥–æ—Ä—å–µ", "7Ô∏è‚É£  –°–µ–º—å –º–æ—Ä–µ–π", "üá±  –û–∑—ë—Ä–∞", "üá® –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã", "üá¶ –ê—Ä—Ö–∏–ø–µ–ª–∞–≥–∏", "üáÆ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –º–æ—Ä–µ", "üá´ –§—Ä–∞–∫—Ç–∞–ª", "üèùÔ∏è –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã –∏ –æ—Å—Ç—Ä–æ–≤–∞"],
            //["üèïÔ∏è  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "üèîÔ∏è –ù–æ–≤—ã–π"],
            //["2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"],
            //["üá∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ", "üá¶ –ò–∑–æ–±–∏–ª—å–Ω—ã–µ"],
            //["üá∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ", "üá¶ –ò–∑–æ–±–∏–ª—å–Ω—ã–µ", "<:Yes:808418109710794843> –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"],
            //["üåÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", "üå† –ò–∑–æ–±–∏–ª—å–Ω–æ–µ"],

            ["<:No:808418109319938099> –ó–∞–ø—Ä–µ—â–µ–Ω–∞", "üí® –†–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è", "üóø –†–∞–∑—Ä–µ—à–µ–Ω–∞"],
            //["<:No:808418109319938099> –ó–∞–ø—Ä–µ—â—ë–Ω", "üó°Ô∏è –†–∞–∑—Ä–µ—à—ë–Ω"],
            //["<:No:808418109319938099> –ù–µ—Ç", "üêç –î–∞"],
            capitanVoteResults,
        ];
        reactionsList = [
            ["üáµ", "üá≠", "7Ô∏è‚É£", "üá±", "üá®", "üá¶", "üáÆ", "üá´", "üèùÔ∏è"],
            //["üèïÔ∏è", "üèîÔ∏è"],
            //["2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"],
            //["üá∏", "üá¶"],
            //["üá∏", "üá¶", "<:Yes:808418109710794843>"],
            //["üåÖ", "üå†"],

            ["<:No:808418109319938099>", "üí®", "üóø"],
            //["<:No:808418109319938099>", "üó°Ô∏è"],
            //["<:No:808418109319938099>", "üêç"],
            emojiOrder,

            ["ü§î"],
            ["‚ö°"],
        ];
    }
    messageContentListVotesLength = messageBeginContentMid.length;
    messageContentListStart = [];
    messageContentListVotes = [];
    for(i in messageBeginContentStart){
        messageContentListStart[i] = messageBeginContentStart[i];
        if((i == 1)||(i == 2))
            for(userID of usersID)
                messageContentListStart[i] += " <@{0}>".format(userID);
    }
    for(i in reactionsList){
        messageContentListVotes[i] = messageBeginContentMid[i];
        for(j in possibleResults[i])
            messageContentListVotes[i] += (possibleResults[i][j] + " | ");
        messageContentListVotes[i] = messageContentListVotes[i].slice(0, -3);
    }
    messageContentListVotes[messageBeginContentMid.length-2] = messageBeginContentMid[messageBeginContentMid.length-2];
    messageContentListVotes[messageBeginContentMid.length-1] = messageBeginContentMid[messageBeginContentMid.length-1];

    civilizationsEmojiList = Array.from(civilizations.keys());

    const trueFilter = (reaction, user) => {return true;};
    const filter = (reaction, user) => {
        messageID = reaction.message.id;
        for(index in messageContentListVotes){
            if(messageContentListVotes[index] == undefined)
                return false;
            if(messageContentListVotes[index].id == messageID){
                j = index;
                break;
            }
        }
        if(j == reactionsList.length - 2)
            return (((civilizationsEmojiList.includes(reaction.emoji.toString().toLowerCase()) || civilizationsEmojiList.includes(reaction.emoji.name)) && (usersID.includes(user.id))) || user.bot);
        if(reactionsList[j] == undefined)
            return false;
        return (((reactionsList[j].includes(reaction.emoji.name) || reactionsList[j].includes(reaction.emoji.toString())) && (usersID.includes(user.id))) || user.bot);
    };

    for(i in messageContentListStart)
        messageContentListStart[i] = await message.channel.send(messageContentListStart[i]);
    for(i in messageContentListVotes)
        messageContentListVotes[i] = await message.channel.send(messageContentListVotes[i]);

    await messageContentListStart[0].react("‚õî");
    collectorDeleteVote = await messageContentListStart[0].createReactionCollector(trueFilter, {time: 185000});
    collectorDeleteVote.on('collect', async (reaction, user) => {
        if((reaction.emoji.toString() != "‚õî")||(user.id != message.author.id))
            await messageContentListVotes[0].reactions.resolve(reaction).users.remove(user);
        else{
            reactionsList = [];
            for(i in messageContentListStart){
                if(messageContentListStart[i] != undefined){
                    await messageContentListStart[i].delete();
                    messageContentListStart[i] = undefined;
                }
            }
            for(i in messageContentListVotes){
                if(messageContentListVotes[i] != undefined){
                    await messageContentListVotes[i].delete();
                    messageContentListVotes[i] = undefined;
                }
            }
            await updateNewCooldownDate(authorID, true);
            return;
        }
    });

    collectorList = [];
    emojiResult = [];
    argsForDraft = [4];
    capitansID = [];

    for(i in messageContentListVotes){
        collectorList[i] = await messageContentListVotes[i].createReactionCollector(trueFilter, {time: 185000});     // +35 —Å–µ–∫
        collectorList[i].on('collect', async (reaction, user) => {
            if(!(filter(reaction, user))){
                messageID = reaction.message.id;
                for(index in messageContentListVotes){
                    if(messageContentListVotes[index] == undefined)
                        return false;
                    if(messageContentListVotes[index].id == messageID){
                        j = index;
                        break;
                    }
                }
                await messageContentListVotes[j].reactions.resolve(reaction).users.remove(user);
            }
            else if(j == messageContentListVotes.length-2){      // –ë–∞–Ω—ã
                emojies = await messageContentListVotes[j].reactions.cache.array();
                emojiNameArray = emojies.map(function(element){ return element._emoji.toString().toLowerCase(); });
                emojiCountArray = emojies.map(function(element){ return element.count; });
                emojiName = reaction.emoji.toString().toLowerCase();
                if((emojiCountArray[emojiNameArray.indexOf(emojiName)] > usersCount/2) && (emojiName != "ü§î")){
                    await messageContentListVotes[j].edit(messageContentListVotes[j].content + "\n" + civilizations.get(emojiName));
                    civilizationsEmojiList.splice(civilizationsEmojiList.indexOf(emojiName), 1);
                    await reaction.remove();
                    argsForDraft.push(emojiName);
                }
            }
            else if(j == messageContentListVotes.length-1){      // –ú–æ–ª–Ω–∏—è
                emojiArray = await messageContentListVotes[j].reactions.cache.array();
                if(emojiArray[0].count-1 == usersCount)
                    for(collector of collectorList)
                        await collector.stop();

                votedUserIndex = usersID.indexOf(user.id);
                if(votedUserIndex != -1){
                    usersID.splice(votedUserIndex, 1);
                    messageContentListStartWaiting = messageBeginContentStart[2];
                    for(userID of usersID)
                        messageContentListStartWaiting += " <@{0}>".format(userID);
                    if(usersID.length != 0)
                        messageContentListStart[2].edit(messageContentListStartWaiting);
                }
            }
        });
        collectorList[i].on('end', async (collected, reason) => {
            if(reason == "messageDelete")
                return;
            emojies = collected.array();
            if(emojies[0] == undefined)
                return;
            messageID = emojies[0].message.id;
            for(index in messageContentListVotes)
            if(messageContentListVotes[index].id == messageID){
                j = index;                                              // –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                break;
            }
            emojiName = emojies.map(function(element){ return element._emoji.toString(); });
            emojiCount = emojies.map(function(element){ return element.count; });
            if((j == messageContentListVotes.length - 3)&&(gameType == 1)){
                emojiResult[j] = [];
                emojiResult[j].push(emojiName[emojiCount.indexOf(Math.max(...emojiCount))]);
                emojiCount.splice(emojiName.indexOf(emojiResult[j][0]), 1);
                emojiName.splice(emojiName.indexOf(emojiResult[j][0]), 1);
                emojiResult[j].push(emojiName[emojiCount.indexOf(Math.max(...emojiCount))]);
                capitansID = emojiResult[j];
            } else {
                emojiResult[j] = emojiName[emojiCount.indexOf(Math.max(...emojiCount))];
            }
            if((emojiResult.filter(Boolean).length == possibleResults.length) && (messageContentListVotes.length == messageContentListVotesLength)){                                                      // –ï—Å–ª–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ, —Ç–æ... —ç—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
                messageContentListStart[0].edit(gameType ? "üìå __**–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ Teamers**__ üìå" : "üìå __**–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ FFA**__ üìå");  // –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å–ª—É—á–∞–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤, —Å–º. –≤—ã—à–µ
                messageContentListStart[0].reactions.removeAll();
                messageContentListStart[2].delete();                                                                                //messageContentListStart[2].edit("‚ö°__**–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!**__");
                for(k in emojiResult){                                                                                              // –ù–æ–≤—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, j –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
                    messageContentListVotes[k].reactions.removeAll();
                    if((k == messageContentListVotes.length-3)&&(gameType == 1)){
                        resultIndexFirst = reactionsList[k].indexOf(emojiResult[k][0]);
                        resultIndexSecond = reactionsList[k].indexOf(emojiResult[k][1]);
                        messageContentListVotes[k].edit(messageBeginContentMid[k] + possibleResults[k][resultIndexFirst] + " –∏ " + possibleResults[k][resultIndexSecond]);
                    } else {
                        resultIndex = reactionsList[k].indexOf(emojiResult[k]);
                        messageContentListVotes[k].edit(messageBeginContentMid[k] + possibleResults[k][resultIndex]);
                    }
                }
                let bansVotingString = messageContentListVotes[messageContentListVotes.length-2].content.slice(121);
                if(bansVotingString == "")
                    bansVotingString = messageContentListVotes[messageContentListVotes.length-2].content.slice(0, 20) + "–Ω–µ—Ç";
                else
                    bansVotingString = messageContentListVotes[messageContentListVotes.length-2].content.slice(0, 20) + "\n" + bansVotingString;
                messageContentListVotes[messageContentListVotes.length-2].edit(bansVotingString);
                messageContentListVotes[emojiResult.length].reactions.removeAll();
                messageContentListVotes.pop().delete();
                if(gameType == 0){
                    await draftFFA(robot, message, argsForDraft, users);
                } else {
                    argsForDraft[0] = 2;
                    for(i in capitansID)
                        capitansID[i] = usersSourceID[emojiOrder.indexOf(capitansID[i])];
                    await split(robot, message, args, capitansID, usersSourceID, argsForDraft);
                }
                updateNewCooldownDate(authorID, true);
            }
        });
    }
    for(i in messageContentListVotes)
        if((messageContentListVotes[i] == undefined)||(reactionsList[i] == undefined))
            return;
        else
            await messageContentListVotes[i].react(reactionsList[i][0]);
    for(i in messageContentListVotes){
        reactionsLength = reactionsList[i].length;
        if(reactionsLength > 1)
            for(let j = 1; j < reactionsLength; j++)
                if(messageContentListVotes[i] != undefined)
                    await messageContentListVotes[i].react(reactionsList[i][j]);
    }
}

module.exports = { newgameVotingFFA, split }
